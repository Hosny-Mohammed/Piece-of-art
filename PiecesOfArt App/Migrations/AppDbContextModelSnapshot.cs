// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PiecesOfArt_App.Data;

#nullable disable

namespace PiecesOfArt_App.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PiecesOfArt_App.Models.Art", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("categoryID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("categoryID");

                    b.HasIndex("userID");

                    b.ToTable("Arts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A beautiful sunset painting.",
                            PublicationDate = new DateOnly(2022, 10, 5),
                            Title = "Sunset Bliss",
                            categoryID = 1,
                            userID = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "An awe-inspiring mountain landscape.",
                            PublicationDate = new DateOnly(2021, 7, 15),
                            Title = "Mountain Majesty",
                            categoryID = 2,
                            userID = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "A vibrant city at night.",
                            PublicationDate = new DateOnly(2023, 3, 22),
                            Title = "City Lights",
                            categoryID = 1,
                            userID = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "The calming waves of the ocean.",
                            PublicationDate = new DateOnly(2020, 6, 8),
                            Title = "Ocean Waves",
                            categoryID = 3,
                            userID = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "A serene path through the forest.",
                            PublicationDate = new DateOnly(2019, 11, 2),
                            Title = "Forest Path",
                            categoryID = 2,
                            userID = 5
                        });
                });

            modelBuilder.Entity("PiecesOfArt_App.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Art depicting natural scenery",
                            Name = "Landscapes"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Art depicting cityscapes",
                            Name = "Urban"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Art depicting the sea",
                            Name = "Seascapes"
                        });
                });

            modelBuilder.Entity("PiecesOfArt_App.Models.LoyaltyCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LoyaltyCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Top-tier membership with exclusive benefits",
                            Name = "Gold Membership"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Mid-tier membership with many benefits",
                            Name = "Silver Membership"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Basic membership with standard benefits",
                            Name = "Bronze Membership"
                        });
                });

            modelBuilder.Entity("PiecesOfArt_App.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("loyaltyCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("loyaltyCardId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 28,
                            Email = "alex.johnson@example.com",
                            Name = "Alex Johnson",
                            loyaltyCardId = 1
                        },
                        new
                        {
                            Id = 2,
                            Age = 32,
                            Email = "bethany.green@example.com",
                            Name = "Bethany Green",
                            loyaltyCardId = 2
                        },
                        new
                        {
                            Id = 3,
                            Age = 24,
                            Email = "charlie.brown@example.com",
                            Name = "Charlie Brown",
                            loyaltyCardId = 1
                        },
                        new
                        {
                            Id = 4,
                            Age = 30,
                            Email = "diana.prince@example.com",
                            Name = "Diana Prince",
                            loyaltyCardId = 3
                        },
                        new
                        {
                            Id = 5,
                            Age = 35,
                            Email = "ethan.hunt@example.com",
                            Name = "Ethan Hunt",
                            loyaltyCardId = 2
                        });
                });

            modelBuilder.Entity("PiecesOfArt_App.Models.Art", b =>
                {
                    b.HasOne("PiecesOfArt_App.Models.Category", "category")
                        .WithMany("Arts")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiecesOfArt_App.Models.User", "user")
                        .WithMany("PieceOfArts")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("user");
                });

            modelBuilder.Entity("PiecesOfArt_App.Models.User", b =>
                {
                    b.HasOne("PiecesOfArt_App.Models.LoyaltyCard", "loyaltyCard")
                        .WithMany("Users")
                        .HasForeignKey("loyaltyCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("loyaltyCard");
                });

            modelBuilder.Entity("PiecesOfArt_App.Models.Category", b =>
                {
                    b.Navigation("Arts");
                });

            modelBuilder.Entity("PiecesOfArt_App.Models.LoyaltyCard", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PiecesOfArt_App.Models.User", b =>
                {
                    b.Navigation("PieceOfArts");
                });
#pragma warning restore 612, 618
        }
    }
}
